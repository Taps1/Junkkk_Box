git init
git clone
git add
git commit
git push
git branch
git status
git log
git fetch - takes the latest changes from remote repo but don't merge into local working copy
git pull - takes the latest changes from remote repo and merge into local working copy
git rebase - Changes from one branch are re-applied to top of another branch to cerate linear history 
git merge - Combine 2 branches and create a merge commit. history remain branched.
git stash - Clean up the working directory by saving uncommitted changes temporarily.
git reset - removes commits from history, git reset --hard HEAD^
git revert - undo the changes with a new commit, better for shared repository.
How do you undo the last commit - 
If changes are not pushed: 
	git reset --soft HEAD^ (retains changes)
	git reset --hard HEAD^ (delete changes)
If changes are pushed:
	git revert HEAD, git push
git cherry-pick: applying specific commit to a branch
Squashing multiple commits into one:
	git rebase -i HEAD~n (n=number of commits)
	Modify pick to Squash for other commits and take only 1 as pick
git branch -d <branch_name>
Recovering a deleted branch:
	git reflog # lookout for your branch hash
	gut checkout -b <branch-name> <hash>
	
After having all the changes you need to push into the repositories:
	git branch -a
	git checkout -b "Alias_name" "actual_branch"
	git checkout -b Rel_0.4 origin/rel_0.4
	git remote -vv	[will check how many remotes you've and in which you'll push the code]
	
	if you dont have the local remote of yourself only you need to fork the repo's into your github account
	then you'll push the data to your github remote account not to Ze's.
	you need to add the remote if you don't have:
		
		git remote add "Alias_name" "git_url_for_repositories"


	Do the git remote -vv, you will get the remote as you "Alias_name"
	Now its time to push the data:
		
		git status
		git diff "file_name"
	
	if changes are not required then checkout from the file and file will get undone
		
		git checkout "file_name"
		git add "file_name"
		git commit -m "message_for_this_particular_commit"
		git push "Alias_name" "you_cur_branch":"your_github_branch"
	Now your code has been pushed to your local forked repos,

	
	If you want to get the most updated code from the origin from where you've forked use:
		
		git remote -vv
	
	will get the list of remotes you have already. 

		git fetch origin [the alias name given to forked remote]
	
	check the branch; eg: you want to merge the code in "branch1", then use
		
		git rebase "remote_branch"

	If you have unpushed commits then you need to stash them, for it you need to do as:

		git stash
		git rebase "branch1"
		git stash apply [All the unpushed commit now'll come to top of the stack of updated code.]

	git branch -vv ['ll give your branch alias name is pointing to which branch]
		
	you can also use some basic stash commands i.e.:
	
		git stash show stash@{0}
		git stash apply stash@{0}		
			
			
Now Its time to send the pull request:
	
	Change the branch of Ze's from master to "working Branch" by clicking on edit
	Do the pull request with some comments and it will get merged to the branch by another person
  
	
some more git commands that are used in speficied Cases:
		git branch --set-upstream "branch_name" [The header will move to Branch "branch_name"]
		git branch -D "branch_name" [It will delete the Branch "branch_name"]


If you want to discard the commit you have changed then you can easily do:
		git reset HEAD^ [HEAD^<==>HEAD-1]

If you want to delete the branch in YOUR remote repo. while pushing then better to use:
		git push TALAT local_branch_name:github_branch_you_want_to_create


If you want to pull from git repo; then use the command:
		git pull Talat_py master
		git pull <you remote URL alias> <Your Branch>

If I want to generate a ssh key, then type this command and navigate to .ssh folder and copy id_rsa.pub key then put onto github ssh section,

		ssh-keygen -t rsa -C "username@domain.com"

some more git commands that are used in speficied Cases:
		git branch --set-upstream "branch_name" [The header will move to Branch "branch_name"]
		git branch -D "branch_name" [It will delete the Branch "branch_name"]

If you want to log a repository from the another directory then you can use:

		git --git-dir=/repo/path/.git log -3 --pretty=oneline 

If you want to revert the commit you need to reset it to the previious commit you've done; Can be done as; If you know to reset to the
specific hash value:
		git reset --soft <hash_value>			#will keep the changes
		git reset --hard <hash_value>			#Will discard the changes

If you want to get to the immediate previous commit:
		git reset --soft HEAD^				#Will keep the changes
		git reset --hard HEAD^				#will discard the changes
		git reset --soft/--hard HEAD^2|3|...

If I want to have more than 1 git accounts on a single local machine, Then do
               ssh-keygen -t rsa -C "first_account@domain_name.com"
               ssh-keygen -t rsa -C "second_account@domain_name.com"
               ssh-keygen -t rsa -C "third_account@doman_name.com"
      Give different names to these RSA keys
      Now, I have to create a config file, as
      vim ~/.ssh/config
-------------------------------------------------------------------------------------------
      Host github.com
        HostName github.com
        User git
        IdentityFile ~/.ssh/id_rsa
--------------------------------------------------------------------------------------------
     Host github-first_account/github_27
        HostName github.com
        User git
        IdentityFile ~/.ssh/id_rsa_27

    Host github-second_account/github_2
        HostName github.com
        User git
        IdentityFile ~/.ssh/id_rsa_2

Once, the config file is been created, I have to add these Identity keys as:
	ssh-add ~/path/to/first/keys/id_rsa
        ssh-add ~/path/to/second/key/id_rsa

Now the work has been done and will be able to do stuff with github, 

       To clone from first account:
          git clone git@github-first_account:/path/to/user/name
          git clone git@<Host>:<repository_paht>

       	  git remote add talat2 git@talat2_account:Taps1/Junkkk_Box.git
	  git push talat2 master
