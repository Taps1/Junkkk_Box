Jenkins is a Java application thence platform independent.
Used for CI & CD (Contiuous Integeration & Continuous Development)

	Developer -> Checks in code to repo -> Source Control (Git) -> Jenkins grabs latest code -> Build artifacts -> Run tests -> Publish O/P to Live server -> Report back

General Scenario: Lots of developers are working on a same project and later we get to know that there's some Exception raised into the codebase that we didn't handled and we need to search that thing where it failed or what caused it, fix it and then release the new code. Now it'd be great if we release the already tested code in order to avoid this situation - Here comes Jenkins as a saviour and played an important role:
    As soon as the developer checks in his code into shared repository, Jenkins create a build with the new code, If there's an issue with that build - We get notified ASAP, So there are no chances that wrong code with exception is going to production. Also - If build is successful but new code introduce some issue, we can run our own testcases, unit testcases to check if codeflow is not disturbed. Once all the build is successful and testcases are fine, then we can let new code to be in production environment.

#Download the Jenkins and place the war file under some location

Setting up the Jenkins via CLI:
    wget -q -O - https://pkg.jenkins.io/debian/jenkins.io.key | sudo apt-key add -
    sudo sh -c 'echo deb http://pkg.jenkins.io/debian-stable binary/ > /etc/apt/sources.list.d/jenkins.list'
    sudo apt-get update
    sudo apt-get install jenkins

This package installation will:

    Setup Jenkins as a daemon launched on start. See /etc/init.d/jenkins for more details.
    Create a jenkins user to run this service.
    Direct console log output to the file /var/log/jenkins/jenkins.log. Check this file if you are troubleshooting Jenkins.
    Populate /etc/default/jenkins with configuration parameters for the launch, e.g JENKINS_HOME
    Set Jenkins to listen on port 8080. Access this port with your browser to start configuration.

    Once Jenkins is installed, it's jenkins.war file can be searched inside location: /usr/share/jenkins/jenkins.war
    java -jar jenkins.war will extract and show all the configurations, Jenkins can now be viewed on browser by: http://localhost:8080/
    However, By default the admin password is been written under: /var/lib/jenkins/secrets/initialAdminPassword, Once logged in - Install the required plugins

    Setting up jenkins on Tomcat: Running Jenkins Standalone (jetty/winstone) vs running Jenkins on Tomcat

    In order to deploy Jenkins on tomcat, I need to setup tomcat:
        * Download tomcat
        * Put jenkins.war file inside tomcat/webapps folder.
        * cd tomcat/bin/
        * sudo chmod a+x *.sh
        * start tomcat: ./startup.sh            # Change port inside tomcat/conf/server.xml if needed
        * localhost:8081/jenkins                # provides the Jenkins deployed on tomcat server

After setting up Jenkins, Jenkins by default create a .jenkins folder inside user's home folder which contains all jobs, logs, plugins. We might need to change it to some other location and the reason for this would be the less space in home directory. 

Go to browser --> Manage Jenkins --> Configure system --> home_dir (to see what's your home directory)

In order to change home directory - create a folder JenkinsHome where your Jenkins.war is placed and copy everything from ~/.jenkins to new folder. and set your JENKINS_HOME to new folder in .bash_rc/bash_profile.

127.0.0.1:8081/jenkins/restart
127.0.0.1:8081/jenkins/systemInfo

In order to use Jenkins via CLI, goto http://localhost:8081/jenkins/cli/ and download jenkins-cli.jar and run below command:

        java -jar jenkins-cli.jar -s http://127.0.0.1:8081/jenkins/ help --username admin --password cbb2240ad032149fc868fc9b07a8bf1e3
        java -jar jenkins-cli.jar -s http://127.0.0.1:8081/jenkins/ version                                     # all CLI command will work

Even new users can be added and can be given the roles/permission using an add-on plugin named as role-strategy-plugin (Download it and put them in plugins folder under JenkinsHome - Talat/Tools/apache-tomcat-8.5.29/webapps/JenkinsHome/plugins/)

Once the plugin is added using manage plugin option, restart the Jenkins and now role-based strategy is listed on Manage-Jenkins / Configure Global Security / Authorization / Role-Based Strategy (As an Admin).
Now other users won't be able to do anything until the role is assigned to them that we can assign in manage_Jenkins/Manage_Roles - Global roles/Slave Roles/Project Roles, assign these users to roles and voila.
(ManageJenkins --> ManageNodes): # of executors - The maximum number of concurrent builds that Jenkins may perform. (Nodes/Agents can be added to distribute the work of build)

Under projects, we can restrict where the project can be run by assigning the labels (Usage of Labels).
Quiet Period: Number of seconds the instance should wait before triggering the job (to create the build) when code is pushed to any SCM
SCM checkout retry count: Maximum retries to fetch code from SCM in case it fails to pull the latest codebase.
Environment variables can be added under configure/GlobalProperties that will be available through out the jobs.

Once all the ocnfigurations are setup then we can create a new item(project) and set all the required parameters say - when do I want to execute the command (crontab), shell script, post build actions. and then we can start building our builds -
    Project --> BuildNow --> GotoBuild --> ConsoleOutput

Apart from building the jobs periodically using crontab, one can trigger builds remotely - for that as soon as we check Trigger builds remotely, it gives us an option to provide token and a URL which we need to call from browser - http://127.0.0.1:8081/jenkins/job/DevProject1/build?token=1234 (As soon as I hit the URL, the build will get triggered)

We can even chain the jobs - create some other projects - Build After other projects are build - post build actions (maintain the dependency) and start executing the jobs and it'll chain the dependency of the various builds.

In order to execute any python projects, I will simply create a new item in Jenkins dashboard and inside Build options, the below command will work:
        cd /home/talat/Talat/GitRepos/Junkkk_Boxes/SandBox/Python_Practice
        python fibonacci.py

and Build now will execute the build and will produce the O/P.
Once we're able to execute the Python build, we can simply fetch the codebase from github. In order to do that install the "git plugin" and set the repository in Source Code Management section of jenkins project and set the crontab after checking Poll SCM.
It'll itself fetch the latest code.

Catlight is used to notify when builds, bugs and tasks need our attention. Simply download catlight and install it and after launching it - just provide Jenkins URL.

    Build --> Deploy --> Test --> Release

(All respective jobs will be chained, Once a job completes only then other jobs execute)

For deployment process in Jenkins, install  deploy plugin (deploy to container). This plugin will take a war/ear file and deploys that to a running remote application server. Supported containers are:
    Tomcat
    JBoss
    GlassFish

Once the plugin is installed, create a new project inside Jenkins dash board. Make sure to add Post Build Action - deploy war/ear to container.
Upload a war/ear file in post build action - Go to configure jenkins - advanced - workspace root directory and now put the downloaded war/ear file into this JENKINS_HOME/workspace/project_name/ directory.
In Jenkins project - In context path field - give your war file name.
and select Tomcat-x.x as a container. and provider username, password - you may need to set the username and password as same as: /apache-tomcat-8.5.29/conf/tomcat-users.xml -->
             <user username="deployer" password="deployer" roles="manager-script"/>

And restart the tomcat and jenkins and try to execute the build.
