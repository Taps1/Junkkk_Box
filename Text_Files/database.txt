Development of storage hardware:
	Puch cards were used back then
	Punch tape
	Magnetc Tape
	Spinning Disks
	- Hard Disk
	- Floppy Disk
	Optical Disk
	- CD/DVD/Blu-ray
	Solid state drive(SSD)

A usually a large collection of data organised especially for rapid search and retrieval

Data is stored on one or more tables (composed of rows and columns)
row - tuple
column - attribute

Different types of databases:
	Relational
	Object Oriented
	Document Based

<INSTALLATION>:
    SOURCE - https://support.rackspace.com/how-to/installing-mysql-server-on-ubuntu/
    sudo apt-get --auto-remove purge mysql\*
    sudo apt install mysql-server
    /usr/bin/mysql_secure_installation
    sudo service mysql start
    sudo /usr/sbin/update-rc.d mysql defaults
    /usr/bin/mysql -u root -p
    /etc/init.d/mysql start
    In order to reflect settings - open file /etc/mysql/mysql.conf.d/mysqld.cnf and change it and restart the mysql.

Setting up a new mysql user:
    open the mysql shell;
    use mysql;
    SELECT * FROM user;       # We can set an offset from where select will start returning records. By default, the offset starts at zero.
    INSERT INTO user (host, user, password, select_priv, insert_priv, update_priv) VALUES ('localhost', 'guest', PASSWORD('guest123'), 'Y', 'Y', 'Y');
    OR
    GRANT SELECT,INSERT,UPDATE,DELETE,CREATE,DROP ON TUTORIALS.* TO 'zara'@'localhost' IDENTIFIED BY 'zara123';

    Here, I have encrypted the password using mysql PASSWORD() method.
    flush privileges; is required to tell the server to reload the grant tables. without using it, newly created user won't be able to connect to MYSQL.
    show columns from <table_name>; or desc <table_name>;
    show index from <table_name>;
    We cannot use=NULL or !=NULL to look NULL values in columns, To look for columns that are or are not NULL, use IS NULL or IS NOT NULL.


In SQL, -- is used for single line comments
/* ... */ is used for multiple line comments

Each table must have one column that can uniquely identify a row is known as Primary key
If more than one table uses the same primary key, we can merge those two tables together, a table can also have a column that is classified as a Foreign key.
A table will have a column which will have values that are primary keys in another table and will be known as Foreign key
A foreign key links that table to another table's primary key
Referential integerity makes sure that foreign key is always pointing to an existing row.
The default size for the table is 4 GB.
All the databases and tables are created under /var/lib/mysql/

Why not just have one table - 
    We've a Contact database
	First Name, Last Name, Email Addresses
    What if one has got more than 1 email address, we can add email2 but ...
    What if one has more than 5 email address, We can't keep on adding more and more fields for emails like email1, email2, .., 

    A better solution - 
	Make a table which will have Key, FirstName, LastName and let's create another table for email addresses

        PERSON_TABLE                                    EMAIL_TABLE
        ------------------------------                  ------------------------------
        Key    FirstName    LastName                    Key    PersonKey    Email
        1      Jon          Flanders                    1      2            fritz@...
        2      Fritz        Onnion                      2      1            jon1@...
                                                        3      1            job2@...

Here, PersonKey(email_table) is a foreignKey to key(person_table)

Now try to ask - what are all jon's email addresses, how many email addresses does each person has.

    <COMMANDS>
        CREATE DATABASE <database_name>;
	USE DATABASE <database_name>;	
        CREATE TABLE <table_name> (<column_name> <datatype>, <column_name> <datatype>, <column_name> <data_type>, ...);
	SELECT <column_name>, <column_name>, ... FROM <table_name>;
	SELECT first_name, last_name FROM person WHERE age BETWEEN 10 AND 15;
        SELECT first_name, last_name FROM person WHERE age IN (10, 11, 12, 13, 14, 15);
        SELECT first_name, last_name FROM person WHERE first_name LIKE 'Tal%';
        SELECT first_name FROM person WHERE last_name IS null;
        SELECT first_name, last_name FROM person ORDER BY first_name, last_name;
        
        SELECT COUNT(*) AS NumberOfPeople FROM person;

	set functions - 
	    functions that help to turn column data from tables into computed values:
                COUNT, MAX, MIN, AVG, SUM

	group by clase - 
            lets us put all the subsets together, and link those subsets up to the column(s) specified in the GROUP BY clause
	    # give me some colleges which are in east direction, some are from west, some from north and some from south

            To appear in GROUP BY clause, the column must be in select list
            SELECT COUNT(gender), gender FROM address GROUP BY gender;

	having - 
            having clause works against result set returned with a group by clause.

    There are two ways to limit the number of rows in a simple SELECT statement
	- Add additional clauses after the from clause
	- Use DISTINCT qualifier before the SELECT list

We can insert multiple rows using multiple value lists
    INSERT INTO person (name, address) VALUES (3,4), (5,6);

Update enables us to change one or more columns in a table.
Delete helps us to delete one or more rows permanently
Alter table enables us to add or change a column definition to an existing table


JOINS are used to create a new result set from two or more tables
    Mainly primary keys and foreign keys play a role in getting the result set, a join can be made between table A and table B with the keys between table where B has a foreign key which acts as a primary key in table A. There are type of Joins:
    CROSS JOIN - join each row of one table to another table without having any relation
    INNER JOIN - Take all the rows from table A, find all the rows from table B with the same key as of table A
    OUTER JOIN - Inner join only joins against rows where there is a match in the joined table, but outer join works even when a row in one of the table doesn't match with a row in the joined table. We'll have entries from both the tables - matched or unmatched
    LEFT OUTER JOIN - Only the rows from left table will be returned
    RIGHT OUTER JOIN - Only the rows from right table will be returned
    SELF JOIN - Joining a table against itself

TRANSACTIONS - A construct that creates a 'context' around one or more SQL statements and follows the ACID propertiesc: Atomic, Consistent, Isolated, Durable 
    Atomic - transaction either happens or it doesn't
    Consistency - transaction leaves the database in consistent state
    Isolated - transaction happens in serial way
    Durable - transation will be stored permanently even in face of disaster

    START TRANSACTION;
    DELETE FROM person;
    COMMIT/ROLLBACK;

    If I plan to use transactions in my MYSQL Programming, then I need to create tables in a special way. there are many types of tables which supports transactions but the most popular is InnoDB.
    Simply add TYPE=InnoDB while creating new tables

We can control the behaviour of transaction by setting session_variable called AUTOCOMMIT, if AUTOCOMMIT is set to 1, then each SQL statement(within transaction or not) is considered to be a complete transaction and committed by default when it finishes.

Alter command is very useful when we want to change a name of my table, any table field or I want to add/delete an existing column in a table.

When AUTOCOMMIT=0, then subsequent series of statements acts as a transaction and are not considered until an explicit commit is issued.

CREATE TABLE person (email varchar(200), department varchar(200));
INSERT INTO person (name, address) VALUES ('Ankit', 'Gujrat');
UPDATE person SET name='anuj', address='ghaziabad' WHERE address='4';
DELETE FROM person WHERE name='anuj';
DROP TABLE person;
CREATE TABLE email_address (email_address_id integer PRIMARY KEY, email_address varchar(200) not null, email_address_person_id integer, CONSTRAINT FOREIGN KEY (email_address_person_id) REFERENCES person (person_id));
ALTER TABLE email_address ADD CONSTRAINT FK_person FOREIGN_KEY (email_address_person_id) REFERENCES person (person_id);
CROSS-JOIN: SELECT p.name, p.address, e.email_address, e.department FROM person p, email e;
INNER JOIN: SELECT p.name, p.address, e.email_address, e.address FROM person p INNER JOIN email e ON p.person_id = e.email_address_person_id;
LEFT OUTER JOIN: SELECT p.name, p.address, e.email_address, e.department FROM person p LEFT OUTER JOIN email e ON p.name = e.department;
RIGHT OUTER JOIN: SELECT p.name, p.address, e.email_address, e.department FROM person p RIGHT OUTER JOIN email e ON p.name = e.department;

MySQL uses datatypes categorised in 3 categories:
    Numeric data types
    Date and time data types
    String data types

Int, TinyInt, SmallInt, MediumInt, BigInt, Float, Double, Decimal
Date, DateTime, TimeStamp, Time, Year
Char, VarChar, Text/Blob, TinyText/TinyBlob, MediumText/MediumBlob, LongText/LongBlob, Enum (If I want my field to contain "A" or "B" or "C", I would define my enum as ENUM(A, B, C)) and only these values or NULL could ever populate that field.

Blob's are used to store large amount of binary data such as image or any other type of data.

<SAMPLE COMMANDS>:
	CREATE TABLE tutorials_tbl (tutorial_id int not null auto_increment, tutorial_title varchar(100) not null, tutorial_author varchar(40) not null, submission_date date, primary key (tutorial_id));
	INSERT INTO tutorials_tbl (tutorial_title, tutorial_author, submission_date) VALUES ("Python", "Rossum", now());
	INSERT INTO tutorials_tbl values (2, "Database", "Vuido", now());
        SELECT * FROM tutorial_tbl;
        SELECT * FROM tutorial_tbl limit 2;
        SELECT * FROM tutorial_tbl where tutorial_title="Python";		# Case insensitive
        SELECT * FROM tutorial_tbl where BINARY tutorial_title="Python";	# Case sensitive
        UPDATE tutorials_tbl SET tutorial_author="Guido" WHERE tutorial_id=2;
        DELETE FROM tutorials_tbl WHERE tutorial_id = 3;
        DELETE FROM tutorials_tbl WHERE tutorial_id = 3 AND tutorial_title="some_value";
        DELETE FROM tutorials_tbl WHERE tutorial_id = 3 OR tutorial_title="some_value";
        SELECT * FROM tutorials_tbl WHERE tutorial_title LIKE "%th%";
        SELECT * FROM tutorials_tbl ORDER BY tutorial_author desc;
        SELECT name FROM person_tbl WHERE name REGEXP 'ok$';			# all names ending with ok
        SELECT name FROM person_tbl WHERE name REGEXP 'mar';			# all names containing 'mar'
        SELECT name FROM person_tbl WHERE name REGEXP '^[aeiou]|ok$';		# names starting with a vowel and ending with ok
        ALTER TABLE testalter_tbl DROP i;
        ALTER TABLE testalter_tbl add i INT;
        ALTER TABLE testalter_tbl add i INT FIRST;
        ALTER TABLE testalter_tbl add i INT AFTER c;
        ALTER TABLE testalter_tbl MODIFY c CHAR(10);
        ALTER TABLE testalter_tbl CHANGE i j BIGINT;
        ALTER TABLE testalter_tbl ALTER i SET DEFAULT 1000;
        ALTER TABLE testalter_tbl ALTER i DROP DEFAULT;
        ALTER TABLE testalter_tbl RENAME TO alter_tbl;
        SELECT * FROM tutorials_tbl INTO OUTFILE "/tmp/outfile.txt";
        SELECT * FROM tutorials_tbl INTO OUTFILE '/tmp/outfile.sql1' FIELDS TERMINATED BY '\t' ENCLOSED BY '"' LINES TERMINATED BY '\r\n';
        mysqldump -uroot -p practice_db tutorials_tbl > /home/talat/dmp.txt;	# will dump single table data into a text file, give multiple table names in case you want to dump data of multiple tables, don't give table name after database name if you want to dump whole database into a single text/sql file.
        mysqldump -u root -p --all-databases > database_dump.txt		# dump all databases available on host

Primary keys can't have NULL values, unique constraints can have NULL values
DDL (Data definition language) - Create, Alter, Drop, Rename
DML (Data Manipulation language) - Select, Insert, Update
DCL (Data control language) - Grant, Revoke

VIEW:
    A view is a virtual table based on the result-set of an SQL statement. We can create using create view syntax. database contains only the definition of a view, not a copy of all data which it presents.

	CREATE VIEW view_name AS
	SELECT column_name(s)
	FROM table_name
	WHERE condition

TRIGGER:
    A Trigger is a code that associated with insert, update or delete operations. The code is executed automatically whenever the associated query is executed on a table. Triggers can be useful to maintain integrity in database.


STORED PROCEDURES:
    A stored procedure is like a function that contains a set of operations compiled together. It contains a set of operations that are commonly used in an application to do some common database tasks.


difference between Trigger and Stored Procedure
    Unlike Stored Procedures, Triggers cannot be called directly. They can only be associated with queries.

INDEXES:
    A database index is a data structure that improves the speed of data retrieval operations on a table at the cost of additional writes and use of more storage space to maintain the extra copy of data. Data can be stored in one order on disk. To support faster access according to different values, faster search like binary search for different values is desired, For this purpose, Indexes are created on tables. These indexes need extra space on disk, but they allow faster search. Two types of index are present - Clustered/Non-Clustered
    Clustered indexes is the index according to which data is physically stored on disk. Non-Clustered indexes doesn't define physical ordering of data, but logical ordering.

CROSS JOIN:
	mysql> select * from tutorials_tbl;
	+-------------+----------------+-----------------+-----------------+
	| tutorial_id | tutorial_title | tutorial_author | submission_date |
	+-------------+----------------+-----------------+-----------------+
	|           1 | Python         | Rossum          | 2017-12-16      |
	|           2 | Database       | Guido           | 2017-12-16      |
	+-------------+----------------+-----------------+-----------------+

	mysql> select * from tcount_tbl;
	+-----------------+----------------+
	| tutorial_author | tutorial_count |
	+-----------------+----------------+
	| Guido           |              3 |
	| Srikant         |              2 |
	+-----------------+----------------+

        mysql> select a.tutorial_title, a.tutorial_author, b.tutorial_author, b.tutorial_count from tutorials_tbl a, tcount_tbl b;
	+----------------+-----------------+-----------------+----------------+
	| tutorial_title | tutorial_author | tutorial_author | tutorial_count |
	+----------------+-----------------+-----------------+----------------+
	| Python         | Rossum          | Guido           |              3 |
	| Database       | Guido           | Guido           |              3 |
	| Python         | Rossum          | Srikant         |              2 |
	| Database       | Guido           | Srikant         |              2 |
	+----------------+-----------------+-----------------+----------------+

INNER JOIN:
	mysql> select a.tutorial_title, a.tutorial_author, b.tutorial_author, b.tutorial_count from tutorials_tbl a INNER JOIN tcount_tbl b on a.tutorial_author=b.tutorial_author;
	+----------------+-----------------+-----------------+----------------+
	| tutorial_title | tutorial_author | tutorial_author | tutorial_count |
	+----------------+-----------------+-----------------+----------------+
	| Database       | Guido           | Guido           |              3 |
	+----------------+-----------------+-----------------+----------------+

LEFT OUTER JOIN:
	mysql> select a.tutorial_title, a.tutorial_author, b.tutorial_author, b.tutorial_count from tutorials_tbl a LEFT OUTER JOIN tcount_tbl b on a.tutorial_author=b.tutorial_author;
	+----------------+-----------------+-----------------+----------------+
	| tutorial_title | tutorial_author | tutorial_author | tutorial_count |
	+----------------+-----------------+-----------------+----------------+
	| Database       | Guido           | Guido           |              3 |
	| Python         | Rossum          | NULL            |           NULL |
	+----------------+-----------------+-----------------+----------------+

RIGHT OUTER JOIN:
	mysql> select a.tutorial_title, a.tutorial_author, b.tutorial_author, b.tutorial_count from tutorials_tbl a RIGHT OUTER JOIN tcount_tbl b on a.tutorial_author=b.tutorial_author;
	+----------------+-----------------+-----------------+----------------+
	| tutorial_title | tutorial_author | tutorial_author | tutorial_count |
	+----------------+-----------------+-----------------+----------------+
	| Database       | Guido           | Guido           |              3 |
	| NULL           | NULL            | Srikant         |              2 |
	+----------------+-----------------+-----------------+----------------+

Second highest salary from the table:
    --> select tutorial_count from (select distinct tutorial_count from tcount_tbl order by tutorial_count desc limit 2) as temp order by tutorial_count limit 1;
    --> select max(tutorial_count) from tcount_tbl where tutorial_count <  (select max(tutorial_count) from tcount_tbl order by tutorial_count desc);
    --> select tutorial_count from tcount_tbl t1 where N-1=(select count(distinct tutorial_count) from tcount_tbl t2 where t2.tutorial_count > t1.tutorial_count);
    # set N=2 for 2nd highest, 3 for 3rd highest
    select tutorial_count from tcount_tbl order by tutorial_count desc limit N-1, 1;
        
