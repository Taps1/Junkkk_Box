Development of storage hardware:
	Puch cards were used back then
	Punch tape
	Magnetc Tape
	Spinning Disks
	- Hard Disk
	- Floppy Disk
	Optical Disk
	- CD/DVD/Blu-ray
	Solid state drive(SSD)

A usually a large collection of data organised especially for rapid search and retrieval

Data is stored on one or more tables (composed of rows and columns)
row - tuple
column - attribute

Different types of databases:
	Relational
	Object Oriented
	Document Based

<INSTALLATION>:
    SOURCE - https://support.rackspace.com/how-to/installing-mysql-server-on-ubuntu/
    sudo apt-get --auto-remove purge mysql\*
    sudo apt install mysql-server
    /usr/bin/mysql_secure_installation
    sudo service mysql start
    sudo /usr/sbin/update-rc.d mysql defaults
    /usr/bin/mysql -u root -p

In SQL, -- is used for single line comments
/* ... */ is used for multiple line comments

Each table must have one column that can uniquely identify a row is known as Primary key
If more than one table uses the same primary key, we can merge those two tables together, a table can also have a column that is classified as a Foreign key.
A table will have a column which will have values that are primary keys in another table and will be known as Foreign key
A foreign key links that table to another table's primary key

Why not just have one table - 
    We've a Contact database
	First Name, Last Name, Email Addresses
    What if one has got more than 1 email address, we can add email2 but ...
    What if one has more than 5 email address, We can't keep on adding more and more fields for emails like email1, email2, .., 

    A better solution - 
	Make a table which will have Key, FirstName, LastName and let's create another table for email addresses

        PERSON_TABLE                                    EMAIL_TABLE
        ------------------------------                  ------------------------------
        Key    FirstName    LastName                    Key    PersonKey    Email
        1      Jon          Flanders                    1      2            fritz@...
        2      Fritz        Onnion                      2      1            jon1@...
                                                        3      1            job2@...

Here, PersonKey(email_table) is a foreignKey to key(person_table)

Now try to ask - what are all jon's email addresses, how many email addresses does each person has.

    <COMMANDS>
        create database <database_name>;
	use database <database_name>;	
        create table <table_name> (<column_name> <datatype>, <column_name> <datatype>, <column_name> <data_type>, ...);
	select <column_name>, <column_name>, ... from <table_name>;
	select first_name, last_name from person where age BETWEEN 10 and 15;
        select first_name, last_name from person where age IN (10, 11, 12, 13, 14, 15);
        select first_name, last_name from person where first_name LIKE 'Tal%';
        select first_name from person where last_name IS null;
        select first_name, last_name from person ORDER BY first_name, last_name;
        
        select COUNT(*) as NumberOfPeople from person;

	set functions - 
	    functions that help to turn column data from tables into computed values:
                COUNT, MAX, MIN, AVG, SUM

	group by clase - 
            lets us put all the subsets together, and link those subsets up to the column(s) specified in the GROUP BY clause
	    # give me some colleges which are in east direction, some are from west, some from north and some from south

            To appear in GROUP BY clause, the column must be in select list
            select count(gender), gender from address GROUP BY gender;

	having - 
            having clause works against result set returned with a group by clause.

    There are two ways to limit the number of rows in a simple SELECT statement
	- Add additional clauses after the from clause
	- Use DISTINCT qualifier before the SELECT list

We can insert multiple rows using multiple value lists
    insert into person (name, address) values (3,4), (5,6);

Update enables us to change one or more columns in a table.
Delete helps us to delete one or more rows permanently
Alter table enables us to add or change a column definition to an existing table


JOINS are used to create a new result set from two or more tables
    Mainly primary keys and foreign keys play a role in getting the result set, a join can be made between table A and table B with the keys between table where B has a foreign key which acts as a primary key in table A. There are type of Joins:
    CROSS JOIN - join each row of one table to another table without having any relation
    INNER JOIN - Take all the rows from table A, find all the rows from table B with the same key as of table A
    OUTER JOIN - Inner join only joins against rows where there is a match in the joined table, but outer join works even when a row in one of the table doesn't match with a row in the joined table. We'll have entries from both the tables - matched or unmatched
    LEFT OUTER JOIN - Only the rows from left table will be returned
    RIGHT OUTER JOIN - Only the rows from right table will be returned
    SELF JOIN - Joining a table against itself

TRANSACTIONS - A construct that creates a 'context' around one or more SQL statements and follows the ACID propertiesc: Atomic, Consistent, Isolated, Durable 
    Atomic - transaction either happens or it doesn't
    Consistency - transaction leaves the database in consistent state
    Isolated - transaction happens in serial way
    Durable - transation will be stored permanently even in face of disaster

    start transaction;
    delete from person;
    commit/rollback;

create table person (email varchar(200), department varchar(200));
insert into person (name, address) values ('Ankit', 'Gujrat');
update person set name='anuj', address='ghaziabad' where address='4';
delete from person where name='anuj';
drop table person;
create table email_address (email_address_id integer PRIMARY KEY, email_address varchar(200) not null, email_address_person_id integer, constraint foreign key (email_address_person_id) references person (person_id));
alter table email_address add constraint FK_person foreign_key (email_address_person_id) references person (persn_id);
CROSS-JOIN: select p.name, p.address, e.email_address, e.department from person p, email e;
INNER JOIN: select p.name, p.address, e.email_address, e.address from person p INNER JOIN email e on p.person_id = e.email_address_person_id;
LEFT OUTER JOIN: select p.name, p.address, e.email_address, e.department from person p LEFT OUTER JOIN email e on p.name = e.department;
RIGHT OUTER JOIN: select p.name, p.address, e.email_address, e.department from person p RIGHT OUTER JOIN email e on p.name = e.department;
