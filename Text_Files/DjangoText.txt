Any third party resource should be attached and detached without any code changes[These configuration must be present in config file not on code].
Build -- Whenever a new code is deployed by the app's developer
Run -- Server reboot, Crashed, Processes being restarted by Process manager.
The Processes shut down gracefully when they receive a SIGTERM signal from the process manager.
Databases -- Postgresql, Mysql, Mssql |
Queueing -- Celery                    | -- Backing Services
Cache -- Memcached                    |

The word on Imports:
All packages and files should be imported in following order:
Standard Library Imports -- Python imports
Related third party imports -- Django imports
Local application -- from local_app.models import local_model

    $ sudo apt-get install python-pip
    $ pip freeze --local

To make the Django Project Layout, We can use cookie cutter and after asking a series of questions, It'll generate all the layout for Project.

    $ cookiecutter https://github.com/pydanny/cookiecutter-django

To open the project with some specific settings, I've to do:
    python manage.py shell --settings=twoscoops.settings.local
    python manage.py runserver --settings=twoscoops.settings.local

Instead of using --settings again and again, We can set DJANGO_SETTINGS_MODULE to our desired settings.

For each instance, We may require different requirements file, So create a requirement folder and then create respective base.txt, local.txt, prod.txt etc.

	# base.py
	django==1.8.0
	psycopg2==2.6
	djangorestframework==3.1.1

	# local.txt
	-r base.txt
	django-debug-toolbar==1.3.0

To Install these files, I've to do is:
	pip install -r requirements/base.txt

If I want to check If my settings are different with Django default settings, I can do is:
	Python manage.py diffsettings

Djago provides three kinds of Model inheritance:
	Abstract base classes,
	Multi table Inheritance,
	Proxy Models.

Django abstract base classes and Python abstract base classes are completely different

Abstract base: Tables are created only for derived models.
Multi table inheritance: Tables are created for both parent and child, OneToOne field links parent and child.
Proxy Models: Allows to have an alias of a model with a different python behaviour

We must avoid multi-table inheritance and should use explicit OnetoOne fields and foreign keys b/w models.
Tables won't be created for this model but tables will be created for the model which inherits it.
	
	# core/models.py
	from django.db import models
	class TimeStampedModel(models.Model):
	"""
	An abstract base class model that provides self-
	updating, created, and modifiedfields.
	
	"""
		created = models.DateTimeField(auto_now_add=True)
		modified = models.DateTimeField(auto_now=True)

	class Meta:
		abstract = True -- Turns this example to Abstract base class.
		       
	from django.db import models
	from core.models import TimeStampedModel
	
	class Flavor(TimeStampedModel):
		title = models.CharField(max_length=200) -- It'll create only one table i.e. flavors_flavor

With MySQL, rollbacks are impossible as MySQL lacks transaction supports.

blank = True -- empty values get stored as empty strings in database.

The original purpose of _meta was simply to store the extra info about models for its own use.
The main uses of meta in models are:
	Get a list of models field.
	
Every time we use the Django ORM to query a model, we're using an interface called Model Manager to interact with database.

	from django.db import models
	from django.utils import timezone
	class PublishedManager(models.Manager):
		use_for_related_fields = True
	
	def published(self, **kwargs):

		return self.filter(pub_date__lte=timezone.now(), **kwargs)

	class FlavorReview(models.Model):
		review = models.CharField(max_length=255)
		pub_date = models.DateTimeField()
		# add our custom model manager
		objects = PublishedManager()

	>>> from reviews.models import FlavorReview
	>>> FlavorReview.objects.count()
	35
	>>> FlavorReview.objects.published().count() or FlavorReview.published.filter().count()
	31

When using model inheritance, children of abstract base classes receive their parent's model manager, and children of concrete base class don't.

Fat Models: Rather than putting data-related code in views, templates We can put the respective code in Models<way to encapsulate logic in models>

<QUERIES AND DJANGO MODELS>
 	when I want to retrieve a single object, I should use get_object_or_404() instead of get(). [keep in views only]

Model.DoestNotExist:

	try:
		return Flavor.objects.get(sku=sku, quantity__gt=0)
	except Flavor.DoesNotExist:
		msg = "We are out of {0}".format(sku)

When I want to retrieve only one but get three back,

	try:
		return Flavor.objects.get(sku=sku,quantity__gt=0)
	except Flavor.DoesNotExist:
		msg = "We are out of {}".format(sku)
	except Flavor.MultipleObjectsReturned:
		msg = "Multiple items have SKU {}. Please fix!".format(sku)
		
	Flavor.objects.filter(name__startswith='talat').exclude(status='inactive')

	Flavor.objects.iterate()		# will have each and every record and can iterate over them

When using POSTGRESQL, pg_stat_activity tells us what indexes are being actually used.

The disadvantage is that if a view requires two or more db modifications and one modifications succeed and other fails, The database is @risk, To avoid this risk We can use transactions. Transaction -- two or more updates work as a single unit. ACID(Atomicity, Consistency, Isolation, Durability). To make this work change the database settings as:

	# settings/base.py
	DATABASES = {

		'default': {
		# ...
			'ATOMIC_REQUESTS': True,
					}
				}


Now each and every request is in a transaction
Database operations that modifies the database should be wrapped in a transaction.
Database operations that do not modify the database should not be wrapped in a transaction.

	.create(), .bulk_create(), .get_or_create()		-- create the data
	.get(), .filter(), .count(), .iterate(), .exists(), .exclude(), .in_bulk()		-- retrieve the data
	.update()		-- update the data
	.delete()		-- delete the data

    We can also undo all the migrations done on an app by firing this command:
        ./manage.py migrate historical_data zero

    Everytime I change the model file and makemirations over manage.py file; It'll create a new migraion file under migrations folder
    Instead of Zero we can also give other value so migration will be rolled back to that particular migrations.
    app_name/migrations/0001_initial.py is the file where the migration code is generated


	Django apps are pluggable so we can use any app in multiple projects.

                                python manage.py check

        this checks for any problems in your project without making migrations or touching the database

