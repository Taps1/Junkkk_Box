Containers on which services can be deployed like Jenkins:
    Glassfish
    Tomcat
    JBoss
    IBM WebSphere
    Jetty
    Jonas
    Weblogic
    Apache Geronimo 3.0
    Liberty profile

<RabbitMQ>:
	It is a message queueing software called a message broker or queue manager. It is a software where queues can be defined.
	Applications may connect to queue and transfer a message onto it.
	A message can be anything - information about a task that should start on another application or can be a simple text message.
	The queue manager software stores the message until a receiving application connects and takes a message off the queue and then the receiving application process the message in an appropriate manner.

SCENARIO: A web application allows users to upload information to a website. The site will handle this information, generates a PDF and send an email back to user. Handling the information, generating the PDF and sending an email takes several seconds and that's one of the reason of why a message queue will be used. When the user has entered information into the web interface, the web application will put a "PDF processing" task and all information into a message and message will be placed onto a queue defined in RabbitMQ.

	There are client applications called producers that create a message and deliver them to broker(message queue), Other applications, called consumers, connects to the queue and subscribes to the messages to be processed.

	Message queueing is also good when you want to distribute a message to multiple recipients for consumption.
	The consumer can take a message of the queue and start the processing of the PDF at the same time as the producer is queueing up new messages on the queue. The consumer/producer can be on different servers or can be located on the same server. The request can be created in one programming language and handled in another programming language. The two applications will only communicate through the messages they are sending to each other.


	The user sends a PDF creation request to the web application.
	The web application (the producer) sends a message to RabbitMQ, including data from the request, like name and email.
	An exchange accepts the messages from a producer application and routes them to correct message queues for PDF creation.
	The PDF processing worker (the consumer) receives the task and starts the processing of the PDF.

Messages are not directly published to queues, instead the producer sends message to an exchange. An exchange is responsible for the routing of the messages to different queue. 
An exchange accepts messages from the producer application and routes them to message queues with help of binding and routing keys. A binding is a link between queue and exchange.
The producer publishes a message to an exchange. when we create an exchange we have to specify the type of it.
The exchange receives the message and is now responsible for the routing of the message. The exchange routes the message into the queues depending on message attributes.

	Direct: A direct exchange delivers messages to queues based on a message routing key. In a direct exchange, the message is routed to the queues whose binding key exactly matches the routing key of the message. If the queue is bound to the exchange with the binding key pdfprocess, a message published to the exchange with a routing key pdfprocess will be routed to that queue.
	Fanout: A fanout exchange routes messages to all of the queues that are bound to it.
	Topic: The topic exchange does a wildcard match between the routing key and the routing pattern specified in the binding.
	Headers: Headers exchanges use the message header attributes for routing. 


    Producer: Application that sends the messages.
    Consumer: Application that receives the messages.
    Queue: Buffer that stores messages.
    Message: Information that is sent from the producer to a consumer through RabbitMQ.
    Connection: A connection is a TCP connection between your application and the RabbitMQ broker.
    Channel: A channel is a virtual connection inside a connection. When you are publishing or consuming messages from a queue - it's all done over a channel.
    Exchange: Receives messages from producers and pushes them to queues depending on rules defined by the exchange type. In order to receive messages, a queue needs to be bound to at least one exchange.
    Binding: A binding is a link between a queue and an exchange.
    Routing key: The routing key is a key that the exchange looks at to decide how to route the message to queues. The routing key is like an address for the message.
    AMQP: AMQP (Advanced Message Queuing Protocol) is the protocol used by RabbitMQ for messaging.
    Users: It is possible to connect to RabbitMQ with a given username and password. Every user can be assigned permissions such as rights to read, write and configure privileges within the instance. Users can also be assigned permissions to specific virtual hosts.
    Vhost, virtual host: A Virtual host provides a way to segregate applications using the same RabbitMQ instance. Different users can have different access privileges to different vhost and queues and exchanges can be created so they only exist in one vhost.

RabbitMQ speaks a  protocol called AMQP by default. To be able to communicate with RabbitMQ we need a library that understands the same protocol as RabbitMQ. we may need to download the client library for language of choice - Python. it's methods should be used when we connect to RabbitMQ broker(using given parameters, hostname, portnumber etc) or when we declare a queue or an exchange.

<CELERY>: An asynchronous task queue. Can be used for everything that needs to be run asynchronously. RabbitMQ message broker is widely used with Celery.
    Why do we need broker - Because Celery doesn't construct a message queue.

    $ pip install celery
    $ sudo apt-get install rabbitmq-server
    # rabbitmq-server

    # add user 'talat' with password 'talat123'
    $ rabbitmqctl add_user talat talat123
    # add virtual host 'talat_vhost'
    $ rabbitmqctl add_vhost talat_vhost
    # add user tag 'talat_tag' for user 'talat'
    $ rabbitmqctl set_user_tags talat talat_tag
    # set permission for user 'talat' on virtual host 'talat_vhost'
    $ rabbitmqctl set_permissions -p talat_vhost talat ".*" ".*" ".*"

STEPS:
    Establish a connection(hostname, portnumber)
    Open a channel, channel needs to be created in the TCP connection.
    Declare/create a queue, needs to be declared before use.
    Setup exchanges and bind queues to an exchange.
    Publish a message to an exchange.
    Consume a message from a queue.
    Close the channel and connection.

Client/Server Architecture:
    Server: a piece of software providing service that is needed by one or more clients.
    Client: Contacting server for a particular request, send over necessary data and then wait for server to reply.

    All they need is communication endpoint i.e. Socket (computer networking data structures).
    Sockets were  first created for interprocess communication where a process communicates with another process in same computer. These are of two types:
    1. File based (AF_local) - runs on the same computer
    2. Netword base (AF_Inet)

    If socket is like a telephone jack then hostname & port is an area code and telephone number combination.

    Regardless of which family we use, there are 2 styles of socket connection:

    CONNECTION ORIENTED: connection must be established before communication can occur e.g. telephone call. Each message can be broken in multiple parts which are all guaranteed to arrive at destination, put back together and in order and deliver to waiting application.
    Protocol that implements such connection is TCP. Socket type: SOCK_STREAM

    CONNECTIONLESS: No connection is necessary before communication can begin. No guarantee of sequencing, reliability or non-duplication in process of data delivery. less expensive and protocol that implement such connections us UDP. Socket type: SOCK_DGRAM